################################################################################
#                  _       
#  ___ _ __   __ _| | _____  ___ 
# / __| '_ \ / _` | |/ / _ \/ __|
# \__ \ | | | (_| |   <  __/\__ \
# |___/_| |_|\__,_|_|\_\___||___/
#                 
# Data integration and machine learning pipelines built on Snakemake
#
# https://github.com/khughitt/snakes
#
{% set title_underline = '-' * (config['name'] | length + config['version'] | length + 1) %}
#  {{ config['name'] }} {{ config['version'] }}
#  {{ title_underline }}
#
#  Config : {{ config['config_file'] }}
#  Date   : {{ date_str }}
#
#  datasets:
{% for dataset_name, dataset in config['datasets'].items() %}
#  - {{ dataset_name }}: {{ dataset['path'] }}
{% endfor %}
#
{% set output_dir = '/'.join([config['output_dir'] | expanduser, config['version']]) %}
#  Output dir: {{ output_dir }} 
#
################################################################################
import glob
import gzip
import operator
import os
import yaml
import numpy as np
import pandas as pd
import pathlib
import warnings
from snakes import clustering, filters, gene_sets 
from snakes.rules import ActionRule, GroupedActionRule

# output directory
output_dir = '{{ output_dir }}' 

################################################################################
#
# Default target
#
################################################################################
rule all:
    input: "{{ output_dir }}/finished"
      
{% for dataset_name, dataset in config['datasets'].items() %}
################################################################################
#
# {{ dataset.name }} workflow
#
################################################################################
  {% for rule_id, action in wrangler.datasets[dataset_name].items() %}
rule {{ rule_id }}:
    {% if not action.inline and not action.groupped %}
      {# ============================== #}
      {# =   ACTION (Non-inline)   = #}
      {# ============================== #}
      {%- include action.template %}
    {% else %}
    input: '{{ action.input }}'
    output: '{{ action.output }}'
    run:
        dat = pd.read_feather(input[0])
        dat = dat.set_index(dat.columns[0])

        {% if action.groupped %}
            {# ==================== #}
            {# =   ACTION GROUP   = #}
            {# ==================== #}
            {% for group_action in action.actions %}
                {%- set action = action.actions[group_action] %}
                {%- include action.template %}
            {% endfor %}
        {% else %}
            {# ============== #}
            {# =   ACTION   = #}
            {# ============== #}
            {%- include action.template %}
        {% endif %}
        dat.reset_index().to_feather(output[0], compression='lz4')

    {% endif %}
  {% endfor %}
{% endfor %}

{% if wrangler.data_integration | length > 0 %}
################################################################################
#
# Data integration
#
################################################################################
{% for action in wrangler.data_integration %}
rule {{ action.rule_id }}:
{% include action.template %}
{% endfor %}
{% endif %}

{% if wrangler.reports | length > 0 %}
################################################################################
#
# Report generation 
#
################################################################################
{% for rule_id, report in wrangler.reports.items() %}
rule {{ rule_id }}:
  input: "{{ report.input }}"
  output: "{{ report.output }}"
  params:
    metadata={{ report.params['metadata'] }},
    styles={{ report.params['styles'] }},
    random_seed={{ config["random_seed"] }},
    dev_mode={{ config["development"]["enabled"] }}
  script: "{{ report.rmd }}"

{% endfor %}
{% endif %}

{% if "features" in config["training_sets"] %}
################################################################################
#
# Training set construction
#
################################################################################
{% include wrangler.training_set.template %}
{% endif %}

{% if wrangler.feature_selection | length > 0 %}
################################################################################
#
# Feature selection
#
################################################################################
{% for rule in wrangler.feature_selection %}
rule {{ rule.rule_id }}:
  input: "{{ rule.input }}"
  output: "{{ rule.output }}"
  params: {{ rule.params }}
{% include rule.template %}
{% endfor %}

################################################################################
#
# Results
#
################################################################################
def aggregate_training_sets_input(wildcards):
    # trigger dag re-evaluation
    tmp_ = checkpoints.create_training_sets.get(**wildcards)

    # output of final feature selection step, or the training set construction
    # step if no feature selection was applied
    tset_output = os.path.join("{{ wrangler.training_set.output }}", "{training_set}.feather")
    fsel_output = "{{ wrangler.get_feature_selection_output() }}"

    return expand(fsel_output, training_set=glob_wildcards(tset_output).training_set)

rule collect_results:
    input:
      expand("{{ output_dir }}/{datasets}", datasets={{ wrangler.get_terminal_rules() }}),
      aggregate_training_sets_input 
    output: touch("{{ output_dir }}/finished")
{%- else %}
rule collect_results:
    input:
      expand("{{ output_dir }}/{datasets}", datasets={{ wrangler.get_terminal_rules() }}),
    output: touch("{{ output_dir }}/finished")
{% endif %}

################################################################################
#
# Other settings
#
################################################################################
localrules: {{ wrangler.get_localrules() }}

{# vim: set softtabstop=2 shiftwidth=2 tabstop=2 filetype=snakemake: #}
